
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVCOLON COMMA DIV DOUBLEQUOTE ELSE ELSE_IF EQ EQUAL FLOAT FNUM FOR GT ID IF INCREMENT INT INUM LBRACE LBRACKET LPAREN LT MAIN MINUS NEQ PERIOD PLUS POINTER PRINT QUOTE RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING TIMES VOIDstmt : expr\n            | declaration\n            | stmt_block\n            | SEMICOLONdeclaration : INT ID SEMICOLON\n                   | FLOAT ID SEMICOLON\n                   | VOID ID SEMICOLONstmt_block : LBRACE stmt_list RBRACEstmt_list : stmt_list stmt\n                 | emptyexpr : ID EQUAL exprexpr : basic_exprbasic_expr : basic_expr compare arith_exprbasic_expr : arith_exprcompare : EQ\n               | NEQ\n               | GT\n               | LTarith_expr : arith_expr PLUS termarith_expr : arith_expr MINUS termarith_expr : termterm : term TIMES factorterm : term DIV factorterm : factorfactor : LPAREN expr RPARENfactor : MINUS factorfactor : IDfactor : FNUMfactor : INUMempty :'
    
_lr_action_items = {'SEMICOLON':([0,2,3,4,5,6,7,11,12,13,15,17,18,25,26,27,28,29,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[5,-1,-2,-3,-4,-27,-12,-30,-14,-21,-24,-28,-29,39,40,41,5,-10,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[6,-1,-2,-3,-4,-27,-12,25,26,27,-30,-14,-21,35,-24,6,-28,-29,6,35,-15,-16,-17,-18,6,-10,35,35,35,35,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'INT':([0,2,3,4,5,6,7,11,12,13,15,17,18,28,29,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[8,-1,-2,-3,-4,-27,-12,-30,-14,-21,-24,-28,-29,8,-10,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'FLOAT':([0,2,3,4,5,6,7,11,12,13,15,17,18,28,29,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[9,-1,-2,-3,-4,-27,-12,-30,-14,-21,-24,-28,-29,9,-10,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'VOID':([0,2,3,4,5,6,7,11,12,13,15,17,18,28,29,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[10,-1,-2,-3,-4,-27,-12,-30,-14,-21,-24,-28,-29,10,-10,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'LBRACE':([0,2,3,4,5,6,7,11,12,13,15,17,18,28,29,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[11,-1,-2,-3,-4,-27,-12,-30,-14,-21,-24,-28,-29,11,-10,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'LPAREN':([0,2,3,4,5,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[16,-1,-2,-3,-4,-27,-12,-30,-14,-21,16,-24,16,-28,-29,16,16,-15,-16,-17,-18,16,-10,16,16,16,16,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'MINUS':([0,2,3,4,5,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[14,-1,-2,-3,-4,-27,-12,-30,31,-21,14,-24,14,-28,-29,14,14,-15,-16,-17,-18,14,-10,14,14,14,14,-26,-27,-11,31,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'FNUM':([0,2,3,4,5,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[17,-1,-2,-3,-4,-27,-12,-30,-14,-21,17,-24,17,-28,-29,17,17,-15,-16,-17,-18,17,-10,17,17,17,17,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'INUM':([0,2,3,4,5,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[18,-1,-2,-3,-4,-27,-12,-30,-14,-21,18,-24,18,-28,-29,18,18,-15,-16,-17,-18,18,-10,18,18,18,18,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'$end':([1,2,3,4,5,6,7,12,13,15,17,18,34,35,37,38,39,40,41,42,44,45,46,47,48,],[0,-1,-2,-3,-4,-27,-12,-14,-21,-24,-28,-29,-26,-27,-11,-13,-5,-6,-7,-8,-19,-20,-22,-23,-25,]),'RBRACE':([2,3,4,5,6,7,11,12,13,15,17,18,28,29,34,35,37,38,39,40,41,42,43,44,45,46,47,48,],[-1,-2,-3,-4,-27,-12,-30,-14,-21,-24,-28,-29,42,-10,-26,-27,-11,-13,-5,-6,-7,-8,-9,-19,-20,-22,-23,-25,]),'EQUAL':([6,],[19,]),'TIMES':([6,13,15,17,18,34,35,44,45,46,47,48,],[-27,32,-24,-28,-29,-26,-27,32,32,-22,-23,-25,]),'DIV':([6,13,15,17,18,34,35,44,45,46,47,48,],[-27,33,-24,-28,-29,-26,-27,33,33,-22,-23,-25,]),'PLUS':([6,12,13,15,17,18,34,35,38,44,45,46,47,48,],[-27,30,-21,-24,-28,-29,-26,-27,30,-19,-20,-22,-23,-25,]),'EQ':([6,7,12,13,15,17,18,34,35,38,44,45,46,47,48,],[-27,21,-14,-21,-24,-28,-29,-26,-27,-13,-19,-20,-22,-23,-25,]),'NEQ':([6,7,12,13,15,17,18,34,35,38,44,45,46,47,48,],[-27,22,-14,-21,-24,-28,-29,-26,-27,-13,-19,-20,-22,-23,-25,]),'GT':([6,7,12,13,15,17,18,34,35,38,44,45,46,47,48,],[-27,23,-14,-21,-24,-28,-29,-26,-27,-13,-19,-20,-22,-23,-25,]),'LT':([6,7,12,13,15,17,18,34,35,38,44,45,46,47,48,],[-27,24,-14,-21,-24,-28,-29,-26,-27,-13,-19,-20,-22,-23,-25,]),'RPAREN':([6,7,12,13,15,17,18,34,35,36,37,38,44,45,46,47,48,],[-27,-12,-14,-21,-24,-28,-29,-26,-27,48,-11,-13,-19,-20,-22,-23,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmt':([0,28,],[1,43,]),'expr':([0,16,19,28,],[2,36,37,2,]),'declaration':([0,28,],[3,3,]),'stmt_block':([0,28,],[4,4,]),'basic_expr':([0,16,19,28,],[7,7,7,7,]),'arith_expr':([0,16,19,20,28,],[12,12,12,38,12,]),'term':([0,16,19,20,28,30,31,],[13,13,13,13,13,44,45,]),'factor':([0,14,16,19,20,28,30,31,32,33,],[15,34,15,15,15,15,15,15,46,47,]),'compare':([7,],[20,]),'stmt_list':([11,],[28,]),'empty':([11,],[29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmt","S'",1,None,None,None),
  ('stmt -> expr','stmt',1,'p_statement','pycparser.py',14),
  ('stmt -> declaration','stmt',1,'p_statement','pycparser.py',15),
  ('stmt -> stmt_block','stmt',1,'p_statement','pycparser.py',16),
  ('stmt -> SEMICOLON','stmt',1,'p_statement','pycparser.py',17),
  ('declaration -> INT ID SEMICOLON','declaration',3,'p_declaration','pycparser.py',23),
  ('declaration -> FLOAT ID SEMICOLON','declaration',3,'p_declaration','pycparser.py',24),
  ('declaration -> VOID ID SEMICOLON','declaration',3,'p_declaration','pycparser.py',25),
  ('stmt_block -> LBRACE stmt_list RBRACE','stmt_block',3,'p_stmt_block','pycparser.py',30),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','pycparser.py',34),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','pycparser.py',35),
  ('expr -> ID EQUAL expr','expr',3,'p_expr_assign','pycparser.py',39),
  ('expr -> basic_expr','expr',1,'p_expr_basic','pycparser.py',43),
  ('basic_expr -> basic_expr compare arith_expr','basic_expr',3,'p_basic_expr_compare','pycparser.py',55),
  ('basic_expr -> arith_expr','basic_expr',1,'p_basic_expr_arith_expr','pycparser.py',66),
  ('compare -> EQ','compare',1,'p_compare','pycparser.py',70),
  ('compare -> NEQ','compare',1,'p_compare','pycparser.py',71),
  ('compare -> GT','compare',1,'p_compare','pycparser.py',72),
  ('compare -> LT','compare',1,'p_compare','pycparser.py',73),
  ('arith_expr -> arith_expr PLUS term','arith_expr',3,'p_arith_add','pycparser.py',79),
  ('arith_expr -> arith_expr MINUS term','arith_expr',3,'p_arith_sub','pycparser.py',83),
  ('arith_expr -> term','arith_expr',1,'p_arith_term','pycparser.py',87),
  ('term -> term TIMES factor','term',3,'p_term_mult','pycparser.py',91),
  ('term -> term DIV factor','term',3,'p_term_div','pycparser.py',95),
  ('term -> factor','term',1,'p_term_factor','pycparser.py',101),
  ('factor -> LPAREN expr RPAREN','factor',3,'p_factor_parens','pycparser.py',105),
  ('factor -> MINUS factor','factor',2,'p_factor_neg','pycparser.py',109),
  ('factor -> ID','factor',1,'p_factor_id','pycparser.py',113),
  ('factor -> FNUM','factor',1,'p_factor_fnum','pycparser.py',117),
  ('factor -> INUM','factor',1,'p_factor_inum','pycparser.py',121),
  ('empty -> <empty>','empty',0,'p_empty','pycparser.py',125),
]
