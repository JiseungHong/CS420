Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMA
    DOUBLEQUOTE
    ELSE
    ELSE_IF
    FLOAT
    FOR
    IF
    INCREMENT
    INT
    LBRACE
    LBRACKET
    MAIN
    PERIOD
    POINTER
    PRINT
    QUOTE
    RBRACE
    RBRACKET
    RETURN
    SEMICOLON
    STRING
    VOID

Grammar

Rule 0     S' -> expr
Rule 1     expr -> ID EQUAL arith_expr
Rule 2     expr -> bool_expr
Rule 3     bool_expr -> arith_expr
Rule 4     bool_expr -> bool_expr EQ arith_expr
Rule 5     bool_expr -> bool_expr NEQ arith_expr
Rule 6     bool_expr -> bool_expr GT arith_expr
Rule 7     bool_expr -> bool_expr LT arith_expr
Rule 8     arith_expr -> arith_expr PLUS term
Rule 9     arith_expr -> arith_expr MINUS term
Rule 10    arith_expr -> term
Rule 11    term -> term TIMES factor
Rule 12    term -> term DIV factor
Rule 13    term -> factor
Rule 14    factor -> LPAREN expr RPAREN
Rule 15    factor -> MINUS factor
Rule 16    factor -> ID
Rule 17    factor -> NUMBER

Terminals, with rules where they appear

COLON                : 
COMMA                : 
DIV                  : 12
DOUBLEQUOTE          : 
ELSE                 : 
ELSE_IF              : 
EQ                   : 4
EQUAL                : 1
FLOAT                : 
FOR                  : 
GT                   : 6
ID                   : 1 16
IF                   : 
INCREMENT            : 
INT                  : 
LBRACE               : 
LBRACKET             : 
LPAREN               : 14
LT                   : 7
MAIN                 : 
MINUS                : 9 15
NEQ                  : 5
NUMBER               : 17
PERIOD               : 
PLUS                 : 8
POINTER              : 
PRINT                : 
QUOTE                : 
RBRACE               : 
RBRACKET             : 
RETURN               : 
RPAREN               : 14
SEMICOLON            : 
STRING               : 
TIMES                : 11
VOID                 : 
error                : 

Nonterminals, with rules where they appear

arith_expr           : 1 3 4 5 6 7 8 9
bool_expr            : 2 4 5 6 7
expr                 : 14 0
factor               : 11 12 13 15
term                 : 8 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . ID EQUAL arith_expr
    (2) expr -> . bool_expr
    (3) bool_expr -> . arith_expr
    (4) bool_expr -> . bool_expr EQ arith_expr
    (5) bool_expr -> . bool_expr NEQ arith_expr
    (6) bool_expr -> . bool_expr GT arith_expr
    (7) bool_expr -> . bool_expr LT arith_expr
    (8) arith_expr -> . arith_expr PLUS term
    (9) arith_expr -> . arith_expr MINUS term
    (10) arith_expr -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIV factor
    (13) term -> . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    ID              shift and go to state 2
    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    NUMBER          shift and go to state 9

    expr                           shift and go to state 1
    arith_expr                     shift and go to state 3
    bool_expr                      shift and go to state 4
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 1

    (0) S' -> expr .



state 2

    (1) expr -> ID . EQUAL arith_expr
    (16) factor -> ID .

    EQUAL           shift and go to state 10
    TIMES           reduce using rule 16 (factor -> ID .)
    DIV             reduce using rule 16 (factor -> ID .)
    PLUS            reduce using rule 16 (factor -> ID .)
    MINUS           reduce using rule 16 (factor -> ID .)
    EQ              reduce using rule 16 (factor -> ID .)
    NEQ             reduce using rule 16 (factor -> ID .)
    GT              reduce using rule 16 (factor -> ID .)
    LT              reduce using rule 16 (factor -> ID .)
    $end            reduce using rule 16 (factor -> ID .)
    RPAREN          reduce using rule 16 (factor -> ID .)


state 3

    (3) bool_expr -> arith_expr .
    (8) arith_expr -> arith_expr . PLUS term
    (9) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 3 (bool_expr -> arith_expr .)
    NEQ             reduce using rule 3 (bool_expr -> arith_expr .)
    GT              reduce using rule 3 (bool_expr -> arith_expr .)
    LT              reduce using rule 3 (bool_expr -> arith_expr .)
    $end            reduce using rule 3 (bool_expr -> arith_expr .)
    RPAREN          reduce using rule 3 (bool_expr -> arith_expr .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 4

    (2) expr -> bool_expr .
    (4) bool_expr -> bool_expr . EQ arith_expr
    (5) bool_expr -> bool_expr . NEQ arith_expr
    (6) bool_expr -> bool_expr . GT arith_expr
    (7) bool_expr -> bool_expr . LT arith_expr

    $end            reduce using rule 2 (expr -> bool_expr .)
    RPAREN          reduce using rule 2 (expr -> bool_expr .)
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    GT              shift and go to state 15
    LT              shift and go to state 16


state 5

    (10) arith_expr -> term .
    (11) term -> term . TIMES factor
    (12) term -> term . DIV factor

    PLUS            reduce using rule 10 (arith_expr -> term .)
    MINUS           reduce using rule 10 (arith_expr -> term .)
    EQ              reduce using rule 10 (arith_expr -> term .)
    NEQ             reduce using rule 10 (arith_expr -> term .)
    GT              reduce using rule 10 (arith_expr -> term .)
    LT              reduce using rule 10 (arith_expr -> term .)
    $end            reduce using rule 10 (arith_expr -> term .)
    RPAREN          reduce using rule 10 (arith_expr -> term .)
    TIMES           shift and go to state 17
    DIV             shift and go to state 18


state 6

    (15) factor -> MINUS . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    factor                         shift and go to state 19

state 7

    (13) term -> factor .

    TIMES           reduce using rule 13 (term -> factor .)
    DIV             reduce using rule 13 (term -> factor .)
    PLUS            reduce using rule 13 (term -> factor .)
    MINUS           reduce using rule 13 (term -> factor .)
    EQ              reduce using rule 13 (term -> factor .)
    NEQ             reduce using rule 13 (term -> factor .)
    GT              reduce using rule 13 (term -> factor .)
    LT              reduce using rule 13 (term -> factor .)
    $end            reduce using rule 13 (term -> factor .)
    RPAREN          reduce using rule 13 (term -> factor .)


state 8

    (14) factor -> LPAREN . expr RPAREN
    (1) expr -> . ID EQUAL arith_expr
    (2) expr -> . bool_expr
    (3) bool_expr -> . arith_expr
    (4) bool_expr -> . bool_expr EQ arith_expr
    (5) bool_expr -> . bool_expr NEQ arith_expr
    (6) bool_expr -> . bool_expr GT arith_expr
    (7) bool_expr -> . bool_expr LT arith_expr
    (8) arith_expr -> . arith_expr PLUS term
    (9) arith_expr -> . arith_expr MINUS term
    (10) arith_expr -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIV factor
    (13) term -> . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    ID              shift and go to state 2
    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    NUMBER          shift and go to state 9

    expr                           shift and go to state 21
    arith_expr                     shift and go to state 3
    bool_expr                      shift and go to state 4
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 9

    (17) factor -> NUMBER .

    TIMES           reduce using rule 17 (factor -> NUMBER .)
    DIV             reduce using rule 17 (factor -> NUMBER .)
    PLUS            reduce using rule 17 (factor -> NUMBER .)
    MINUS           reduce using rule 17 (factor -> NUMBER .)
    EQ              reduce using rule 17 (factor -> NUMBER .)
    NEQ             reduce using rule 17 (factor -> NUMBER .)
    GT              reduce using rule 17 (factor -> NUMBER .)
    LT              reduce using rule 17 (factor -> NUMBER .)
    $end            reduce using rule 17 (factor -> NUMBER .)
    RPAREN          reduce using rule 17 (factor -> NUMBER .)


state 10

    (1) expr -> ID EQUAL . arith_expr
    (8) arith_expr -> . arith_expr PLUS term
    (9) arith_expr -> . arith_expr MINUS term
    (10) arith_expr -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIV factor
    (13) term -> . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    arith_expr                     shift and go to state 22
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 11

    (8) arith_expr -> arith_expr PLUS . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIV factor
    (13) term -> . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    term                           shift and go to state 23
    factor                         shift and go to state 7

state 12

    (9) arith_expr -> arith_expr MINUS . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIV factor
    (13) term -> . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    term                           shift and go to state 24
    factor                         shift and go to state 7

state 13

    (4) bool_expr -> bool_expr EQ . arith_expr
    (8) arith_expr -> . arith_expr PLUS term
    (9) arith_expr -> . arith_expr MINUS term
    (10) arith_expr -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIV factor
    (13) term -> . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    arith_expr                     shift and go to state 25
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 14

    (5) bool_expr -> bool_expr NEQ . arith_expr
    (8) arith_expr -> . arith_expr PLUS term
    (9) arith_expr -> . arith_expr MINUS term
    (10) arith_expr -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIV factor
    (13) term -> . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    arith_expr                     shift and go to state 26
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 15

    (6) bool_expr -> bool_expr GT . arith_expr
    (8) arith_expr -> . arith_expr PLUS term
    (9) arith_expr -> . arith_expr MINUS term
    (10) arith_expr -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIV factor
    (13) term -> . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    arith_expr                     shift and go to state 27
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 16

    (7) bool_expr -> bool_expr LT . arith_expr
    (8) arith_expr -> . arith_expr PLUS term
    (9) arith_expr -> . arith_expr MINUS term
    (10) arith_expr -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIV factor
    (13) term -> . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    arith_expr                     shift and go to state 28
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 17

    (11) term -> term TIMES . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    factor                         shift and go to state 29

state 18

    (12) term -> term DIV . factor
    (14) factor -> . LPAREN expr RPAREN
    (15) factor -> . MINUS factor
    (16) factor -> . ID
    (17) factor -> . NUMBER

    LPAREN          shift and go to state 8
    MINUS           shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    factor                         shift and go to state 30

state 19

    (15) factor -> MINUS factor .

    TIMES           reduce using rule 15 (factor -> MINUS factor .)
    DIV             reduce using rule 15 (factor -> MINUS factor .)
    PLUS            reduce using rule 15 (factor -> MINUS factor .)
    MINUS           reduce using rule 15 (factor -> MINUS factor .)
    EQ              reduce using rule 15 (factor -> MINUS factor .)
    NEQ             reduce using rule 15 (factor -> MINUS factor .)
    GT              reduce using rule 15 (factor -> MINUS factor .)
    LT              reduce using rule 15 (factor -> MINUS factor .)
    $end            reduce using rule 15 (factor -> MINUS factor .)
    RPAREN          reduce using rule 15 (factor -> MINUS factor .)


state 20

    (16) factor -> ID .

    TIMES           reduce using rule 16 (factor -> ID .)
    DIV             reduce using rule 16 (factor -> ID .)
    PLUS            reduce using rule 16 (factor -> ID .)
    MINUS           reduce using rule 16 (factor -> ID .)
    EQ              reduce using rule 16 (factor -> ID .)
    NEQ             reduce using rule 16 (factor -> ID .)
    GT              reduce using rule 16 (factor -> ID .)
    LT              reduce using rule 16 (factor -> ID .)
    $end            reduce using rule 16 (factor -> ID .)
    RPAREN          reduce using rule 16 (factor -> ID .)


state 21

    (14) factor -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 31


state 22

    (1) expr -> ID EQUAL arith_expr .
    (8) arith_expr -> arith_expr . PLUS term
    (9) arith_expr -> arith_expr . MINUS term

    $end            reduce using rule 1 (expr -> ID EQUAL arith_expr .)
    RPAREN          reduce using rule 1 (expr -> ID EQUAL arith_expr .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 23

    (8) arith_expr -> arith_expr PLUS term .
    (11) term -> term . TIMES factor
    (12) term -> term . DIV factor

    PLUS            reduce using rule 8 (arith_expr -> arith_expr PLUS term .)
    MINUS           reduce using rule 8 (arith_expr -> arith_expr PLUS term .)
    EQ              reduce using rule 8 (arith_expr -> arith_expr PLUS term .)
    NEQ             reduce using rule 8 (arith_expr -> arith_expr PLUS term .)
    GT              reduce using rule 8 (arith_expr -> arith_expr PLUS term .)
    LT              reduce using rule 8 (arith_expr -> arith_expr PLUS term .)
    $end            reduce using rule 8 (arith_expr -> arith_expr PLUS term .)
    RPAREN          reduce using rule 8 (arith_expr -> arith_expr PLUS term .)
    TIMES           shift and go to state 17
    DIV             shift and go to state 18


state 24

    (9) arith_expr -> arith_expr MINUS term .
    (11) term -> term . TIMES factor
    (12) term -> term . DIV factor

    PLUS            reduce using rule 9 (arith_expr -> arith_expr MINUS term .)
    MINUS           reduce using rule 9 (arith_expr -> arith_expr MINUS term .)
    EQ              reduce using rule 9 (arith_expr -> arith_expr MINUS term .)
    NEQ             reduce using rule 9 (arith_expr -> arith_expr MINUS term .)
    GT              reduce using rule 9 (arith_expr -> arith_expr MINUS term .)
    LT              reduce using rule 9 (arith_expr -> arith_expr MINUS term .)
    $end            reduce using rule 9 (arith_expr -> arith_expr MINUS term .)
    RPAREN          reduce using rule 9 (arith_expr -> arith_expr MINUS term .)
    TIMES           shift and go to state 17
    DIV             shift and go to state 18


state 25

    (4) bool_expr -> bool_expr EQ arith_expr .
    (8) arith_expr -> arith_expr . PLUS term
    (9) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 4 (bool_expr -> bool_expr EQ arith_expr .)
    NEQ             reduce using rule 4 (bool_expr -> bool_expr EQ arith_expr .)
    GT              reduce using rule 4 (bool_expr -> bool_expr EQ arith_expr .)
    LT              reduce using rule 4 (bool_expr -> bool_expr EQ arith_expr .)
    $end            reduce using rule 4 (bool_expr -> bool_expr EQ arith_expr .)
    RPAREN          reduce using rule 4 (bool_expr -> bool_expr EQ arith_expr .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 26

    (5) bool_expr -> bool_expr NEQ arith_expr .
    (8) arith_expr -> arith_expr . PLUS term
    (9) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 5 (bool_expr -> bool_expr NEQ arith_expr .)
    NEQ             reduce using rule 5 (bool_expr -> bool_expr NEQ arith_expr .)
    GT              reduce using rule 5 (bool_expr -> bool_expr NEQ arith_expr .)
    LT              reduce using rule 5 (bool_expr -> bool_expr NEQ arith_expr .)
    $end            reduce using rule 5 (bool_expr -> bool_expr NEQ arith_expr .)
    RPAREN          reduce using rule 5 (bool_expr -> bool_expr NEQ arith_expr .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 27

    (6) bool_expr -> bool_expr GT arith_expr .
    (8) arith_expr -> arith_expr . PLUS term
    (9) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 6 (bool_expr -> bool_expr GT arith_expr .)
    NEQ             reduce using rule 6 (bool_expr -> bool_expr GT arith_expr .)
    GT              reduce using rule 6 (bool_expr -> bool_expr GT arith_expr .)
    LT              reduce using rule 6 (bool_expr -> bool_expr GT arith_expr .)
    $end            reduce using rule 6 (bool_expr -> bool_expr GT arith_expr .)
    RPAREN          reduce using rule 6 (bool_expr -> bool_expr GT arith_expr .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 28

    (7) bool_expr -> bool_expr LT arith_expr .
    (8) arith_expr -> arith_expr . PLUS term
    (9) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 7 (bool_expr -> bool_expr LT arith_expr .)
    NEQ             reduce using rule 7 (bool_expr -> bool_expr LT arith_expr .)
    GT              reduce using rule 7 (bool_expr -> bool_expr LT arith_expr .)
    LT              reduce using rule 7 (bool_expr -> bool_expr LT arith_expr .)
    $end            reduce using rule 7 (bool_expr -> bool_expr LT arith_expr .)
    RPAREN          reduce using rule 7 (bool_expr -> bool_expr LT arith_expr .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 29

    (11) term -> term TIMES factor .

    TIMES           reduce using rule 11 (term -> term TIMES factor .)
    DIV             reduce using rule 11 (term -> term TIMES factor .)
    PLUS            reduce using rule 11 (term -> term TIMES factor .)
    MINUS           reduce using rule 11 (term -> term TIMES factor .)
    EQ              reduce using rule 11 (term -> term TIMES factor .)
    NEQ             reduce using rule 11 (term -> term TIMES factor .)
    GT              reduce using rule 11 (term -> term TIMES factor .)
    LT              reduce using rule 11 (term -> term TIMES factor .)
    $end            reduce using rule 11 (term -> term TIMES factor .)
    RPAREN          reduce using rule 11 (term -> term TIMES factor .)


state 30

    (12) term -> term DIV factor .

    TIMES           reduce using rule 12 (term -> term DIV factor .)
    DIV             reduce using rule 12 (term -> term DIV factor .)
    PLUS            reduce using rule 12 (term -> term DIV factor .)
    MINUS           reduce using rule 12 (term -> term DIV factor .)
    EQ              reduce using rule 12 (term -> term DIV factor .)
    NEQ             reduce using rule 12 (term -> term DIV factor .)
    GT              reduce using rule 12 (term -> term DIV factor .)
    LT              reduce using rule 12 (term -> term DIV factor .)
    $end            reduce using rule 12 (term -> term DIV factor .)
    RPAREN          reduce using rule 12 (term -> term DIV factor .)


state 31

    (14) factor -> LPAREN expr RPAREN .

    TIMES           reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    DIV             reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    EQ              reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    GT              reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    LT              reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    $end            reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 14 (factor -> LPAREN expr RPAREN .)

