Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMA
    DOUBLEQUOTE
    ELSE
    ELSE_IF
    FOR
    IF
    INCREMENT
    LBRACKET
    MAIN
    PERIOD
    POINTER
    PRINT
    QUOTE
    RBRACKET
    RETURN
    STRING

Grammar

Rule 0     S' -> stmt
Rule 1     stmt -> expr
Rule 2     stmt -> declaration
Rule 3     stmt -> stmt_block
Rule 4     stmt -> SEMICOLON
Rule 5     declaration -> INT ID SEMICOLON
Rule 6     declaration -> FLOAT ID SEMICOLON
Rule 7     declaration -> VOID ID SEMICOLON
Rule 8     stmt_block -> LBRACE stmt_list RBRACE
Rule 9     stmt_list -> stmt_list stmt
Rule 10    stmt_list -> empty
Rule 11    expr -> ID EQUAL expr
Rule 12    expr -> bool_expr
Rule 13    bool_expr -> arith_expr
Rule 14    bool_expr -> bool_expr EQ arith_expr
Rule 15    bool_expr -> bool_expr NEQ arith_expr
Rule 16    bool_expr -> bool_expr GT arith_expr
Rule 17    bool_expr -> bool_expr LT arith_expr
Rule 18    arith_expr -> arith_expr PLUS term
Rule 19    arith_expr -> arith_expr MINUS term
Rule 20    arith_expr -> term
Rule 21    term -> term TIMES factor
Rule 22    term -> term DIV factor
Rule 23    term -> factor
Rule 24    factor -> LPAREN expr RPAREN
Rule 25    factor -> ID
Rule 26    factor -> FNUM
Rule 27    factor -> INUM
Rule 28    empty -> <empty>

Terminals, with rules where they appear

COLON                : 
COMMA                : 
DIV                  : 22
DOUBLEQUOTE          : 
ELSE                 : 
ELSE_IF              : 
EQ                   : 14
EQUAL                : 11
FLOAT                : 6
FNUM                 : 26
FOR                  : 
GT                   : 16
ID                   : 5 6 7 11 25
IF                   : 
INCREMENT            : 
INT                  : 5
INUM                 : 27
LBRACE               : 8
LBRACKET             : 
LPAREN               : 24
LT                   : 17
MAIN                 : 
MINUS                : 19
NEQ                  : 15
PERIOD               : 
PLUS                 : 18
POINTER              : 
PRINT                : 
QUOTE                : 
RBRACE               : 8
RBRACKET             : 
RETURN               : 
RPAREN               : 24
SEMICOLON            : 4 5 6 7
STRING               : 
TIMES                : 21
VOID                 : 7
error                : 

Nonterminals, with rules where they appear

arith_expr           : 13 14 15 16 17 18 19
bool_expr            : 12 14 15 16 17
declaration          : 2
empty                : 10
expr                 : 1 11 24
factor               : 21 22 23
stmt                 : 9 0
stmt_block           : 3
stmt_list            : 8 9
term                 : 18 19 20 21 22

Parsing method: LALR

state 0

    (0) S' -> . stmt
    (1) stmt -> . expr
    (2) stmt -> . declaration
    (3) stmt -> . stmt_block
    (4) stmt -> . SEMICOLON
    (11) expr -> . ID EQUAL expr
    (12) expr -> . bool_expr
    (5) declaration -> . INT ID SEMICOLON
    (6) declaration -> . FLOAT ID SEMICOLON
    (7) declaration -> . VOID ID SEMICOLON
    (8) stmt_block -> . LBRACE stmt_list RBRACE
    (13) bool_expr -> . arith_expr
    (14) bool_expr -> . bool_expr EQ arith_expr
    (15) bool_expr -> . bool_expr NEQ arith_expr
    (16) bool_expr -> . bool_expr GT arith_expr
    (17) bool_expr -> . bool_expr LT arith_expr
    (18) arith_expr -> . arith_expr PLUS term
    (19) arith_expr -> . arith_expr MINUS term
    (20) arith_expr -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    SEMICOLON       shift and go to state 5
    ID              shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    VOID            shift and go to state 10
    LBRACE          shift and go to state 11
    LPAREN          shift and go to state 15
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    stmt                           shift and go to state 1
    expr                           shift and go to state 2
    declaration                    shift and go to state 3
    stmt_block                     shift and go to state 4
    bool_expr                      shift and go to state 7
    arith_expr                     shift and go to state 12
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 1

    (0) S' -> stmt .



state 2

    (1) stmt -> expr .

    $end            reduce using rule 1 (stmt -> expr .)
    RBRACE          reduce using rule 1 (stmt -> expr .)
    SEMICOLON       reduce using rule 1 (stmt -> expr .)
    ID              reduce using rule 1 (stmt -> expr .)
    INT             reduce using rule 1 (stmt -> expr .)
    FLOAT           reduce using rule 1 (stmt -> expr .)
    VOID            reduce using rule 1 (stmt -> expr .)
    LBRACE          reduce using rule 1 (stmt -> expr .)
    LPAREN          reduce using rule 1 (stmt -> expr .)
    FNUM            reduce using rule 1 (stmt -> expr .)
    INUM            reduce using rule 1 (stmt -> expr .)


state 3

    (2) stmt -> declaration .

    $end            reduce using rule 2 (stmt -> declaration .)
    RBRACE          reduce using rule 2 (stmt -> declaration .)
    SEMICOLON       reduce using rule 2 (stmt -> declaration .)
    ID              reduce using rule 2 (stmt -> declaration .)
    INT             reduce using rule 2 (stmt -> declaration .)
    FLOAT           reduce using rule 2 (stmt -> declaration .)
    VOID            reduce using rule 2 (stmt -> declaration .)
    LBRACE          reduce using rule 2 (stmt -> declaration .)
    LPAREN          reduce using rule 2 (stmt -> declaration .)
    FNUM            reduce using rule 2 (stmt -> declaration .)
    INUM            reduce using rule 2 (stmt -> declaration .)


state 4

    (3) stmt -> stmt_block .

    $end            reduce using rule 3 (stmt -> stmt_block .)
    RBRACE          reduce using rule 3 (stmt -> stmt_block .)
    SEMICOLON       reduce using rule 3 (stmt -> stmt_block .)
    ID              reduce using rule 3 (stmt -> stmt_block .)
    INT             reduce using rule 3 (stmt -> stmt_block .)
    FLOAT           reduce using rule 3 (stmt -> stmt_block .)
    VOID            reduce using rule 3 (stmt -> stmt_block .)
    LBRACE          reduce using rule 3 (stmt -> stmt_block .)
    LPAREN          reduce using rule 3 (stmt -> stmt_block .)
    FNUM            reduce using rule 3 (stmt -> stmt_block .)
    INUM            reduce using rule 3 (stmt -> stmt_block .)


state 5

    (4) stmt -> SEMICOLON .

    $end            reduce using rule 4 (stmt -> SEMICOLON .)
    RBRACE          reduce using rule 4 (stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 4 (stmt -> SEMICOLON .)
    ID              reduce using rule 4 (stmt -> SEMICOLON .)
    INT             reduce using rule 4 (stmt -> SEMICOLON .)
    FLOAT           reduce using rule 4 (stmt -> SEMICOLON .)
    VOID            reduce using rule 4 (stmt -> SEMICOLON .)
    LBRACE          reduce using rule 4 (stmt -> SEMICOLON .)
    LPAREN          reduce using rule 4 (stmt -> SEMICOLON .)
    FNUM            reduce using rule 4 (stmt -> SEMICOLON .)
    INUM            reduce using rule 4 (stmt -> SEMICOLON .)


state 6

    (11) expr -> ID . EQUAL expr
    (25) factor -> ID .

    EQUAL           shift and go to state 18
    TIMES           reduce using rule 25 (factor -> ID .)
    DIV             reduce using rule 25 (factor -> ID .)
    PLUS            reduce using rule 25 (factor -> ID .)
    MINUS           reduce using rule 25 (factor -> ID .)
    EQ              reduce using rule 25 (factor -> ID .)
    NEQ             reduce using rule 25 (factor -> ID .)
    GT              reduce using rule 25 (factor -> ID .)
    LT              reduce using rule 25 (factor -> ID .)
    $end            reduce using rule 25 (factor -> ID .)
    RPAREN          reduce using rule 25 (factor -> ID .)
    RBRACE          reduce using rule 25 (factor -> ID .)
    SEMICOLON       reduce using rule 25 (factor -> ID .)
    ID              reduce using rule 25 (factor -> ID .)
    INT             reduce using rule 25 (factor -> ID .)
    FLOAT           reduce using rule 25 (factor -> ID .)
    VOID            reduce using rule 25 (factor -> ID .)
    LBRACE          reduce using rule 25 (factor -> ID .)
    LPAREN          reduce using rule 25 (factor -> ID .)
    FNUM            reduce using rule 25 (factor -> ID .)
    INUM            reduce using rule 25 (factor -> ID .)


state 7

    (12) expr -> bool_expr .
    (14) bool_expr -> bool_expr . EQ arith_expr
    (15) bool_expr -> bool_expr . NEQ arith_expr
    (16) bool_expr -> bool_expr . GT arith_expr
    (17) bool_expr -> bool_expr . LT arith_expr

    $end            reduce using rule 12 (expr -> bool_expr .)
    RPAREN          reduce using rule 12 (expr -> bool_expr .)
    RBRACE          reduce using rule 12 (expr -> bool_expr .)
    SEMICOLON       reduce using rule 12 (expr -> bool_expr .)
    ID              reduce using rule 12 (expr -> bool_expr .)
    INT             reduce using rule 12 (expr -> bool_expr .)
    FLOAT           reduce using rule 12 (expr -> bool_expr .)
    VOID            reduce using rule 12 (expr -> bool_expr .)
    LBRACE          reduce using rule 12 (expr -> bool_expr .)
    LPAREN          reduce using rule 12 (expr -> bool_expr .)
    FNUM            reduce using rule 12 (expr -> bool_expr .)
    INUM            reduce using rule 12 (expr -> bool_expr .)
    EQ              shift and go to state 19
    NEQ             shift and go to state 20
    GT              shift and go to state 21
    LT              shift and go to state 22


state 8

    (5) declaration -> INT . ID SEMICOLON

    ID              shift and go to state 23


state 9

    (6) declaration -> FLOAT . ID SEMICOLON

    ID              shift and go to state 24


state 10

    (7) declaration -> VOID . ID SEMICOLON

    ID              shift and go to state 25


state 11

    (8) stmt_block -> LBRACE . stmt_list RBRACE
    (9) stmt_list -> . stmt_list stmt
    (10) stmt_list -> . empty
    (28) empty -> .

    RBRACE          reduce using rule 28 (empty -> .)
    SEMICOLON       reduce using rule 28 (empty -> .)
    ID              reduce using rule 28 (empty -> .)
    INT             reduce using rule 28 (empty -> .)
    FLOAT           reduce using rule 28 (empty -> .)
    VOID            reduce using rule 28 (empty -> .)
    LBRACE          reduce using rule 28 (empty -> .)
    LPAREN          reduce using rule 28 (empty -> .)
    FNUM            reduce using rule 28 (empty -> .)
    INUM            reduce using rule 28 (empty -> .)

    stmt_list                      shift and go to state 26
    empty                          shift and go to state 27

state 12

    (13) bool_expr -> arith_expr .
    (18) arith_expr -> arith_expr . PLUS term
    (19) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 13 (bool_expr -> arith_expr .)
    NEQ             reduce using rule 13 (bool_expr -> arith_expr .)
    GT              reduce using rule 13 (bool_expr -> arith_expr .)
    LT              reduce using rule 13 (bool_expr -> arith_expr .)
    $end            reduce using rule 13 (bool_expr -> arith_expr .)
    RPAREN          reduce using rule 13 (bool_expr -> arith_expr .)
    RBRACE          reduce using rule 13 (bool_expr -> arith_expr .)
    SEMICOLON       reduce using rule 13 (bool_expr -> arith_expr .)
    ID              reduce using rule 13 (bool_expr -> arith_expr .)
    INT             reduce using rule 13 (bool_expr -> arith_expr .)
    FLOAT           reduce using rule 13 (bool_expr -> arith_expr .)
    VOID            reduce using rule 13 (bool_expr -> arith_expr .)
    LBRACE          reduce using rule 13 (bool_expr -> arith_expr .)
    LPAREN          reduce using rule 13 (bool_expr -> arith_expr .)
    FNUM            reduce using rule 13 (bool_expr -> arith_expr .)
    INUM            reduce using rule 13 (bool_expr -> arith_expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29


state 13

    (20) arith_expr -> term .
    (21) term -> term . TIMES factor
    (22) term -> term . DIV factor

    PLUS            reduce using rule 20 (arith_expr -> term .)
    MINUS           reduce using rule 20 (arith_expr -> term .)
    EQ              reduce using rule 20 (arith_expr -> term .)
    NEQ             reduce using rule 20 (arith_expr -> term .)
    GT              reduce using rule 20 (arith_expr -> term .)
    LT              reduce using rule 20 (arith_expr -> term .)
    $end            reduce using rule 20 (arith_expr -> term .)
    RPAREN          reduce using rule 20 (arith_expr -> term .)
    RBRACE          reduce using rule 20 (arith_expr -> term .)
    SEMICOLON       reduce using rule 20 (arith_expr -> term .)
    ID              reduce using rule 20 (arith_expr -> term .)
    INT             reduce using rule 20 (arith_expr -> term .)
    FLOAT           reduce using rule 20 (arith_expr -> term .)
    VOID            reduce using rule 20 (arith_expr -> term .)
    LBRACE          reduce using rule 20 (arith_expr -> term .)
    LPAREN          reduce using rule 20 (arith_expr -> term .)
    FNUM            reduce using rule 20 (arith_expr -> term .)
    INUM            reduce using rule 20 (arith_expr -> term .)
    TIMES           shift and go to state 30
    DIV             shift and go to state 31


state 14

    (23) term -> factor .

    TIMES           reduce using rule 23 (term -> factor .)
    DIV             reduce using rule 23 (term -> factor .)
    PLUS            reduce using rule 23 (term -> factor .)
    MINUS           reduce using rule 23 (term -> factor .)
    EQ              reduce using rule 23 (term -> factor .)
    NEQ             reduce using rule 23 (term -> factor .)
    GT              reduce using rule 23 (term -> factor .)
    LT              reduce using rule 23 (term -> factor .)
    $end            reduce using rule 23 (term -> factor .)
    RPAREN          reduce using rule 23 (term -> factor .)
    RBRACE          reduce using rule 23 (term -> factor .)
    SEMICOLON       reduce using rule 23 (term -> factor .)
    ID              reduce using rule 23 (term -> factor .)
    INT             reduce using rule 23 (term -> factor .)
    FLOAT           reduce using rule 23 (term -> factor .)
    VOID            reduce using rule 23 (term -> factor .)
    LBRACE          reduce using rule 23 (term -> factor .)
    LPAREN          reduce using rule 23 (term -> factor .)
    FNUM            reduce using rule 23 (term -> factor .)
    INUM            reduce using rule 23 (term -> factor .)


state 15

    (24) factor -> LPAREN . expr RPAREN
    (11) expr -> . ID EQUAL expr
    (12) expr -> . bool_expr
    (13) bool_expr -> . arith_expr
    (14) bool_expr -> . bool_expr EQ arith_expr
    (15) bool_expr -> . bool_expr NEQ arith_expr
    (16) bool_expr -> . bool_expr GT arith_expr
    (17) bool_expr -> . bool_expr LT arith_expr
    (18) arith_expr -> . arith_expr PLUS term
    (19) arith_expr -> . arith_expr MINUS term
    (20) arith_expr -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    ID              shift and go to state 6
    LPAREN          shift and go to state 15
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    expr                           shift and go to state 32
    bool_expr                      shift and go to state 7
    arith_expr                     shift and go to state 12
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 16

    (26) factor -> FNUM .

    TIMES           reduce using rule 26 (factor -> FNUM .)
    DIV             reduce using rule 26 (factor -> FNUM .)
    PLUS            reduce using rule 26 (factor -> FNUM .)
    MINUS           reduce using rule 26 (factor -> FNUM .)
    EQ              reduce using rule 26 (factor -> FNUM .)
    NEQ             reduce using rule 26 (factor -> FNUM .)
    GT              reduce using rule 26 (factor -> FNUM .)
    LT              reduce using rule 26 (factor -> FNUM .)
    $end            reduce using rule 26 (factor -> FNUM .)
    RPAREN          reduce using rule 26 (factor -> FNUM .)
    RBRACE          reduce using rule 26 (factor -> FNUM .)
    SEMICOLON       reduce using rule 26 (factor -> FNUM .)
    ID              reduce using rule 26 (factor -> FNUM .)
    INT             reduce using rule 26 (factor -> FNUM .)
    FLOAT           reduce using rule 26 (factor -> FNUM .)
    VOID            reduce using rule 26 (factor -> FNUM .)
    LBRACE          reduce using rule 26 (factor -> FNUM .)
    LPAREN          reduce using rule 26 (factor -> FNUM .)
    FNUM            reduce using rule 26 (factor -> FNUM .)
    INUM            reduce using rule 26 (factor -> FNUM .)


state 17

    (27) factor -> INUM .

    TIMES           reduce using rule 27 (factor -> INUM .)
    DIV             reduce using rule 27 (factor -> INUM .)
    PLUS            reduce using rule 27 (factor -> INUM .)
    MINUS           reduce using rule 27 (factor -> INUM .)
    EQ              reduce using rule 27 (factor -> INUM .)
    NEQ             reduce using rule 27 (factor -> INUM .)
    GT              reduce using rule 27 (factor -> INUM .)
    LT              reduce using rule 27 (factor -> INUM .)
    $end            reduce using rule 27 (factor -> INUM .)
    RPAREN          reduce using rule 27 (factor -> INUM .)
    RBRACE          reduce using rule 27 (factor -> INUM .)
    SEMICOLON       reduce using rule 27 (factor -> INUM .)
    ID              reduce using rule 27 (factor -> INUM .)
    INT             reduce using rule 27 (factor -> INUM .)
    FLOAT           reduce using rule 27 (factor -> INUM .)
    VOID            reduce using rule 27 (factor -> INUM .)
    LBRACE          reduce using rule 27 (factor -> INUM .)
    LPAREN          reduce using rule 27 (factor -> INUM .)
    FNUM            reduce using rule 27 (factor -> INUM .)
    INUM            reduce using rule 27 (factor -> INUM .)


state 18

    (11) expr -> ID EQUAL . expr
    (11) expr -> . ID EQUAL expr
    (12) expr -> . bool_expr
    (13) bool_expr -> . arith_expr
    (14) bool_expr -> . bool_expr EQ arith_expr
    (15) bool_expr -> . bool_expr NEQ arith_expr
    (16) bool_expr -> . bool_expr GT arith_expr
    (17) bool_expr -> . bool_expr LT arith_expr
    (18) arith_expr -> . arith_expr PLUS term
    (19) arith_expr -> . arith_expr MINUS term
    (20) arith_expr -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    ID              shift and go to state 6
    LPAREN          shift and go to state 15
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    expr                           shift and go to state 33
    bool_expr                      shift and go to state 7
    arith_expr                     shift and go to state 12
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 19

    (14) bool_expr -> bool_expr EQ . arith_expr
    (18) arith_expr -> . arith_expr PLUS term
    (19) arith_expr -> . arith_expr MINUS term
    (20) arith_expr -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    LPAREN          shift and go to state 15
    ID              shift and go to state 35
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    arith_expr                     shift and go to state 34
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 20

    (15) bool_expr -> bool_expr NEQ . arith_expr
    (18) arith_expr -> . arith_expr PLUS term
    (19) arith_expr -> . arith_expr MINUS term
    (20) arith_expr -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    LPAREN          shift and go to state 15
    ID              shift and go to state 35
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    arith_expr                     shift and go to state 36
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 21

    (16) bool_expr -> bool_expr GT . arith_expr
    (18) arith_expr -> . arith_expr PLUS term
    (19) arith_expr -> . arith_expr MINUS term
    (20) arith_expr -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    LPAREN          shift and go to state 15
    ID              shift and go to state 35
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    arith_expr                     shift and go to state 37
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 22

    (17) bool_expr -> bool_expr LT . arith_expr
    (18) arith_expr -> . arith_expr PLUS term
    (19) arith_expr -> . arith_expr MINUS term
    (20) arith_expr -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    LPAREN          shift and go to state 15
    ID              shift and go to state 35
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    arith_expr                     shift and go to state 38
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 23

    (5) declaration -> INT ID . SEMICOLON

    SEMICOLON       shift and go to state 39


state 24

    (6) declaration -> FLOAT ID . SEMICOLON

    SEMICOLON       shift and go to state 40


state 25

    (7) declaration -> VOID ID . SEMICOLON

    SEMICOLON       shift and go to state 41


state 26

    (8) stmt_block -> LBRACE stmt_list . RBRACE
    (9) stmt_list -> stmt_list . stmt
    (1) stmt -> . expr
    (2) stmt -> . declaration
    (3) stmt -> . stmt_block
    (4) stmt -> . SEMICOLON
    (11) expr -> . ID EQUAL expr
    (12) expr -> . bool_expr
    (5) declaration -> . INT ID SEMICOLON
    (6) declaration -> . FLOAT ID SEMICOLON
    (7) declaration -> . VOID ID SEMICOLON
    (8) stmt_block -> . LBRACE stmt_list RBRACE
    (13) bool_expr -> . arith_expr
    (14) bool_expr -> . bool_expr EQ arith_expr
    (15) bool_expr -> . bool_expr NEQ arith_expr
    (16) bool_expr -> . bool_expr GT arith_expr
    (17) bool_expr -> . bool_expr LT arith_expr
    (18) arith_expr -> . arith_expr PLUS term
    (19) arith_expr -> . arith_expr MINUS term
    (20) arith_expr -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    RBRACE          shift and go to state 42
    SEMICOLON       shift and go to state 5
    ID              shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    VOID            shift and go to state 10
    LBRACE          shift and go to state 11
    LPAREN          shift and go to state 15
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    stmt                           shift and go to state 43
    expr                           shift and go to state 2
    declaration                    shift and go to state 3
    stmt_block                     shift and go to state 4
    bool_expr                      shift and go to state 7
    arith_expr                     shift and go to state 12
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 27

    (10) stmt_list -> empty .

    RBRACE          reduce using rule 10 (stmt_list -> empty .)
    SEMICOLON       reduce using rule 10 (stmt_list -> empty .)
    ID              reduce using rule 10 (stmt_list -> empty .)
    INT             reduce using rule 10 (stmt_list -> empty .)
    FLOAT           reduce using rule 10 (stmt_list -> empty .)
    VOID            reduce using rule 10 (stmt_list -> empty .)
    LBRACE          reduce using rule 10 (stmt_list -> empty .)
    LPAREN          reduce using rule 10 (stmt_list -> empty .)
    FNUM            reduce using rule 10 (stmt_list -> empty .)
    INUM            reduce using rule 10 (stmt_list -> empty .)


state 28

    (18) arith_expr -> arith_expr PLUS . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    LPAREN          shift and go to state 15
    ID              shift and go to state 35
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    term                           shift and go to state 44
    factor                         shift and go to state 14

state 29

    (19) arith_expr -> arith_expr MINUS . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIV factor
    (23) term -> . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    LPAREN          shift and go to state 15
    ID              shift and go to state 35
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    term                           shift and go to state 45
    factor                         shift and go to state 14

state 30

    (21) term -> term TIMES . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    LPAREN          shift and go to state 15
    ID              shift and go to state 35
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    factor                         shift and go to state 46

state 31

    (22) term -> term DIV . factor
    (24) factor -> . LPAREN expr RPAREN
    (25) factor -> . ID
    (26) factor -> . FNUM
    (27) factor -> . INUM

    LPAREN          shift and go to state 15
    ID              shift and go to state 35
    FNUM            shift and go to state 16
    INUM            shift and go to state 17

    factor                         shift and go to state 47

state 32

    (24) factor -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 48


state 33

    (11) expr -> ID EQUAL expr .

    $end            reduce using rule 11 (expr -> ID EQUAL expr .)
    RPAREN          reduce using rule 11 (expr -> ID EQUAL expr .)
    RBRACE          reduce using rule 11 (expr -> ID EQUAL expr .)
    SEMICOLON       reduce using rule 11 (expr -> ID EQUAL expr .)
    ID              reduce using rule 11 (expr -> ID EQUAL expr .)
    INT             reduce using rule 11 (expr -> ID EQUAL expr .)
    FLOAT           reduce using rule 11 (expr -> ID EQUAL expr .)
    VOID            reduce using rule 11 (expr -> ID EQUAL expr .)
    LBRACE          reduce using rule 11 (expr -> ID EQUAL expr .)
    LPAREN          reduce using rule 11 (expr -> ID EQUAL expr .)
    FNUM            reduce using rule 11 (expr -> ID EQUAL expr .)
    INUM            reduce using rule 11 (expr -> ID EQUAL expr .)


state 34

    (14) bool_expr -> bool_expr EQ arith_expr .
    (18) arith_expr -> arith_expr . PLUS term
    (19) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    NEQ             reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    GT              reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    LT              reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    $end            reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    RPAREN          reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    RBRACE          reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    SEMICOLON       reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    ID              reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    INT             reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    FLOAT           reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    VOID            reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    LBRACE          reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    LPAREN          reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    FNUM            reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    INUM            reduce using rule 14 (bool_expr -> bool_expr EQ arith_expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29


state 35

    (25) factor -> ID .

    TIMES           reduce using rule 25 (factor -> ID .)
    DIV             reduce using rule 25 (factor -> ID .)
    PLUS            reduce using rule 25 (factor -> ID .)
    MINUS           reduce using rule 25 (factor -> ID .)
    EQ              reduce using rule 25 (factor -> ID .)
    NEQ             reduce using rule 25 (factor -> ID .)
    GT              reduce using rule 25 (factor -> ID .)
    LT              reduce using rule 25 (factor -> ID .)
    $end            reduce using rule 25 (factor -> ID .)
    RPAREN          reduce using rule 25 (factor -> ID .)
    RBRACE          reduce using rule 25 (factor -> ID .)
    SEMICOLON       reduce using rule 25 (factor -> ID .)
    ID              reduce using rule 25 (factor -> ID .)
    INT             reduce using rule 25 (factor -> ID .)
    FLOAT           reduce using rule 25 (factor -> ID .)
    VOID            reduce using rule 25 (factor -> ID .)
    LBRACE          reduce using rule 25 (factor -> ID .)
    LPAREN          reduce using rule 25 (factor -> ID .)
    FNUM            reduce using rule 25 (factor -> ID .)
    INUM            reduce using rule 25 (factor -> ID .)


state 36

    (15) bool_expr -> bool_expr NEQ arith_expr .
    (18) arith_expr -> arith_expr . PLUS term
    (19) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    NEQ             reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    GT              reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    LT              reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    $end            reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    RPAREN          reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    RBRACE          reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    SEMICOLON       reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    ID              reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    INT             reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    FLOAT           reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    VOID            reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    LBRACE          reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    LPAREN          reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    FNUM            reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    INUM            reduce using rule 15 (bool_expr -> bool_expr NEQ arith_expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29


state 37

    (16) bool_expr -> bool_expr GT arith_expr .
    (18) arith_expr -> arith_expr . PLUS term
    (19) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    NEQ             reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    GT              reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    LT              reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    $end            reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    RPAREN          reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    RBRACE          reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    SEMICOLON       reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    ID              reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    INT             reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    FLOAT           reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    VOID            reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    LBRACE          reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    LPAREN          reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    FNUM            reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    INUM            reduce using rule 16 (bool_expr -> bool_expr GT arith_expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29


state 38

    (17) bool_expr -> bool_expr LT arith_expr .
    (18) arith_expr -> arith_expr . PLUS term
    (19) arith_expr -> arith_expr . MINUS term

    EQ              reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    NEQ             reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    GT              reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    LT              reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    $end            reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    RPAREN          reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    RBRACE          reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    SEMICOLON       reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    ID              reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    INT             reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    FLOAT           reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    VOID            reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    LBRACE          reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    LPAREN          reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    FNUM            reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    INUM            reduce using rule 17 (bool_expr -> bool_expr LT arith_expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29


state 39

    (5) declaration -> INT ID SEMICOLON .

    $end            reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    RBRACE          reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    SEMICOLON       reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    ID              reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    INT             reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    FLOAT           reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    VOID            reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    LBRACE          reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    LPAREN          reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    FNUM            reduce using rule 5 (declaration -> INT ID SEMICOLON .)
    INUM            reduce using rule 5 (declaration -> INT ID SEMICOLON .)


state 40

    (6) declaration -> FLOAT ID SEMICOLON .

    $end            reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    RBRACE          reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    SEMICOLON       reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    ID              reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    INT             reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    FLOAT           reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    VOID            reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    LBRACE          reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    LPAREN          reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    FNUM            reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)
    INUM            reduce using rule 6 (declaration -> FLOAT ID SEMICOLON .)


state 41

    (7) declaration -> VOID ID SEMICOLON .

    $end            reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    RBRACE          reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    SEMICOLON       reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    ID              reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    INT             reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    FLOAT           reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    VOID            reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    LBRACE          reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    LPAREN          reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    FNUM            reduce using rule 7 (declaration -> VOID ID SEMICOLON .)
    INUM            reduce using rule 7 (declaration -> VOID ID SEMICOLON .)


state 42

    (8) stmt_block -> LBRACE stmt_list RBRACE .

    $end            reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    SEMICOLON       reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    ID              reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    INT             reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    VOID            reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    LBRACE          reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    FNUM            reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)
    INUM            reduce using rule 8 (stmt_block -> LBRACE stmt_list RBRACE .)


state 43

    (9) stmt_list -> stmt_list stmt .

    RBRACE          reduce using rule 9 (stmt_list -> stmt_list stmt .)
    SEMICOLON       reduce using rule 9 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 9 (stmt_list -> stmt_list stmt .)
    INT             reduce using rule 9 (stmt_list -> stmt_list stmt .)
    FLOAT           reduce using rule 9 (stmt_list -> stmt_list stmt .)
    VOID            reduce using rule 9 (stmt_list -> stmt_list stmt .)
    LBRACE          reduce using rule 9 (stmt_list -> stmt_list stmt .)
    LPAREN          reduce using rule 9 (stmt_list -> stmt_list stmt .)
    FNUM            reduce using rule 9 (stmt_list -> stmt_list stmt .)
    INUM            reduce using rule 9 (stmt_list -> stmt_list stmt .)


state 44

    (18) arith_expr -> arith_expr PLUS term .
    (21) term -> term . TIMES factor
    (22) term -> term . DIV factor

    PLUS            reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    MINUS           reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    EQ              reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    NEQ             reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    GT              reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    LT              reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    $end            reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    RPAREN          reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    RBRACE          reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    SEMICOLON       reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    ID              reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    INT             reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    FLOAT           reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    VOID            reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    LBRACE          reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    LPAREN          reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    FNUM            reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    INUM            reduce using rule 18 (arith_expr -> arith_expr PLUS term .)
    TIMES           shift and go to state 30
    DIV             shift and go to state 31


state 45

    (19) arith_expr -> arith_expr MINUS term .
    (21) term -> term . TIMES factor
    (22) term -> term . DIV factor

    PLUS            reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    MINUS           reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    EQ              reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    NEQ             reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    GT              reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    LT              reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    $end            reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    RPAREN          reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    RBRACE          reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    SEMICOLON       reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    ID              reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    INT             reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    FLOAT           reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    VOID            reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    LBRACE          reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    LPAREN          reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    FNUM            reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    INUM            reduce using rule 19 (arith_expr -> arith_expr MINUS term .)
    TIMES           shift and go to state 30
    DIV             shift and go to state 31


state 46

    (21) term -> term TIMES factor .

    TIMES           reduce using rule 21 (term -> term TIMES factor .)
    DIV             reduce using rule 21 (term -> term TIMES factor .)
    PLUS            reduce using rule 21 (term -> term TIMES factor .)
    MINUS           reduce using rule 21 (term -> term TIMES factor .)
    EQ              reduce using rule 21 (term -> term TIMES factor .)
    NEQ             reduce using rule 21 (term -> term TIMES factor .)
    GT              reduce using rule 21 (term -> term TIMES factor .)
    LT              reduce using rule 21 (term -> term TIMES factor .)
    $end            reduce using rule 21 (term -> term TIMES factor .)
    RPAREN          reduce using rule 21 (term -> term TIMES factor .)
    RBRACE          reduce using rule 21 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 21 (term -> term TIMES factor .)
    ID              reduce using rule 21 (term -> term TIMES factor .)
    INT             reduce using rule 21 (term -> term TIMES factor .)
    FLOAT           reduce using rule 21 (term -> term TIMES factor .)
    VOID            reduce using rule 21 (term -> term TIMES factor .)
    LBRACE          reduce using rule 21 (term -> term TIMES factor .)
    LPAREN          reduce using rule 21 (term -> term TIMES factor .)
    FNUM            reduce using rule 21 (term -> term TIMES factor .)
    INUM            reduce using rule 21 (term -> term TIMES factor .)


state 47

    (22) term -> term DIV factor .

    TIMES           reduce using rule 22 (term -> term DIV factor .)
    DIV             reduce using rule 22 (term -> term DIV factor .)
    PLUS            reduce using rule 22 (term -> term DIV factor .)
    MINUS           reduce using rule 22 (term -> term DIV factor .)
    EQ              reduce using rule 22 (term -> term DIV factor .)
    NEQ             reduce using rule 22 (term -> term DIV factor .)
    GT              reduce using rule 22 (term -> term DIV factor .)
    LT              reduce using rule 22 (term -> term DIV factor .)
    $end            reduce using rule 22 (term -> term DIV factor .)
    RPAREN          reduce using rule 22 (term -> term DIV factor .)
    RBRACE          reduce using rule 22 (term -> term DIV factor .)
    SEMICOLON       reduce using rule 22 (term -> term DIV factor .)
    ID              reduce using rule 22 (term -> term DIV factor .)
    INT             reduce using rule 22 (term -> term DIV factor .)
    FLOAT           reduce using rule 22 (term -> term DIV factor .)
    VOID            reduce using rule 22 (term -> term DIV factor .)
    LBRACE          reduce using rule 22 (term -> term DIV factor .)
    LPAREN          reduce using rule 22 (term -> term DIV factor .)
    FNUM            reduce using rule 22 (term -> term DIV factor .)
    INUM            reduce using rule 22 (term -> term DIV factor .)


state 48

    (24) factor -> LPAREN expr RPAREN .

    TIMES           reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    DIV             reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    EQ              reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    GT              reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    LT              reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    $end            reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    ID              reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    INT             reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    FLOAT           reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    VOID            reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    FNUM            reduce using rule 24 (factor -> LPAREN expr RPAREN .)
    INUM            reduce using rule 24 (factor -> LPAREN expr RPAREN .)

